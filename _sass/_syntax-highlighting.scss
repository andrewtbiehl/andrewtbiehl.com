$colors: (
  "keyword": #d50,
  "type": #800,
  "value": #049,
  "procedure": #738,
  "comment": gray,
  "attribute": #162,
  "output": #444,
  "prompt": gray
);

code[data-highlighter=rouge] {

  // Tokens left "unhighlighted" for a variety of reasons
  // Whitespace should be left blank
  .w, // Text.Whitespace
  // Most tokens are lumped into the category of "names" by the less-than-ideal lexer
  .n, // Name
  .na, // Name.Attribute
  .no, // Name.Constant
  .nl, // Name.Label
  .nx, // Name.Other
  // String interpolation characters are arguably just punctuation
  .si, // Literal.String.Interpol
  // See the keyword tokens operators comment for more information
  .o, // Operator
  .ow, // Operator.Word
  // Punctuation should primarily fade to the background
  .p // Punctuation
  {
    color: black;
  }

  // Distinguish constants from other variables
  .no // Name.Constant
  {
    font-weight: bold;
  }

  // Procedure tokens
  .nf // Name.Function
  {
    color: map-get($colors, "procedure");
    font-style: italic;
  }

  // Keyword tokens
  .k, // Keyword
  .kd, // Keyword.Declaration
  .kn, // Keyword.Namespace
  .kr, // Keyword.Reserved
  &[data-language=cpp] .nl, // Name.Label
  // This class is used for keywords in other languages but apparently not in Ruby
  &[data-language=ruby] .nb, // Name.Builtin
  .nt, // Name.Tag
  // The Java lexer unfortunately categorizes all punctuation marks as operators
  // Hence Java is better left excluded when syntax-highlighting operators
  &:not([data-language=java]) .o, // Operator
  &:not([data-language=java]) .ow // Operator.Word
  {
    color: map-get($colors, "keyword");
  }

  // Type tokens
  .kt, // Keyword.Type
  &[data-language=typescript] .kr, // Keyword.Reserved
  .nb, // Name.Builtin
  .nc, // Name.Class
  // Namespaces as types is imperfect but types often show up in function namespacing
  .nn // Name.Namespace
  {
    color: map-get($colors, "type");
  }

  // Value tokens
  .kc, // Keyword.Constant
  .bp, // Name.Builtin.Pseudo
  .cp, // Comment.Preproc
  .s, // Literal.String
  .sa, // Literal.String.Affix
  .sb, // Literal.String.Backtick
  .dl, // Literal.String.Delimiter
  .s2, // Literal.String.Double
  .mi // Literal.Number.Integer
  {
    color: map-get($colors, "value");
  }

  // Comment tokens
  .cm, // Comment.Multiline
  .c1 // Comment.Single
  {
    color: map-get($colors, "comment");
    font-style: italic;
  }

  // Attribute tokens
  &[data-language=html] .na, // Name.Attribute
  &[data-language=yaml] .na, // Name.Attribute
  &[data-language=markdown] .nl, // Name.Label
  &[data-language=typescript] .nl, // Name.Label
  .py // Name.Property
  {
    color: map-get($colors, "attribute");
    font-style: italic;
  }

  .go // Generic.Output
  {
    color: map-get($colors, "output");
  }

  .gp // Generic.Prompt
  {
    color: map-get($colors, "prompt");
  }

  // Currently unused tokens

  // Miscellaneous
  .err, // Error
  .x, // Other

  // Keyword
  .kp, // Keyword.Pseudo
  .nd, // Name.Decorator
  .ni, // Name.Entity
  .ne, // Name.Exception
  .fm, // Name.Function.Magic
  .nv, // Name.Variable
  .vc, // Name.Variable.Class
  .vg, // Name.Variable.Global
  .vi, // Name.Variable.Instance
  .vm, // Name.Variable.Magic

  // Literal
  .l,
  .ld, // Literal.Date
  .sc, // Literal.String.Char
  .sd, // Literal.String.Doc
  .se, // Literal.String.Escape
  .sh, // Literal.String.Heredoc
  .sx, // Literal.String.Other
  .sr, // Literal.String.Regex
  .s1, // Literal.String.Single
  .ss, // Literal.String.Symbol
  .m, // Literal.Number
  .mb, // Literal.Number.Bin
  .mf, // Literal.Number.Float
  .mh, // Literal.Number.Hex
  .il, // Literal.Number.Integer.Long
  .mo, // Literal.Number.Oct

  // Punctuation
  .pm, // Punctuation.Marker

  // Comment
  .c,
  .ch, // Comment.Hashbang
  .cpf, // Comment.PreprocFile
  .cs, // Comment.Special

  // Generic
  .g,
  .gd, // Generic.Deleted
  .ge, // Generic.Emph
  .gr, // Generic.Error
  .gh, // Generic.Heading
  .gi, // Generic.Inserted
  .gs, // Generic.Strong
  .gu, // Generic.Subheading
  .gt // Generic.Traceback
  {
    // Background color is set to bright red to draw the developer's attention
    // If a once unused token is now being used, it needs to be handled accordingly
    background-color: red;
  }
}

code[data-highlighter=tree-sitter] {
  // Tokens left "unhighlighted" for a variety of reasons
  // Constants are variables
  .ts-constant,
  // Embedded code should not be the same color as its surroundings
  .ts-embedded,
  // Delimiters should primarily fade to the background
  .ts-delimiter,
  // The variable token is somewhat of a catch-all token
  .ts-variable,
  .ts-variable-parameter
  {
    color: black;
  }

  // Punctuation should assume the color of its container
  .ts-punctuation-bracket,
  .ts-punctuation-delimiter,
  .ts-punctuation-special,
  {
    background-color: transparent;
  }

  // Distinguish parameter variables from other variables
  .ts-variable-parameter
  {
    text-decoration: underline;
  }

  // Distinguish constants from other variables
  &:not([data-language=html]) .ts-constant
  {
     font-weight: bold;
  }

  // Procedure tokens
  .ts-function, .ts-function > .ts-variable,
  .ts-function-builtin,
  .ts-function-macro,
  .ts-function-method
  {
    color: map-get($colors, "procedure");
    font-style: italic;
  }

  // Distinguish macros from normal procedures
  .ts-function-macro
  {
    font-weight: bold;
  }

  // Keyword tokens
  .ts-conditional,
  .ts-function-method-builtin,
  .ts-include,
  .ts-keyword,
  .ts-operator,
  .ts-tag,
  .ts-variable-builtin
  {
    color: map-get($colors, "keyword");
  }

  // Type tokens
  .ts-constructor,
  .ts-namespace,
  .ts-type,
  .ts-type-builtin
  {
    color: map-get($colors, "type");
  }

  // Value tokens
  &[data-language=html] .ts-constant,
  .ts-constant-builtin,
  .ts-escape,
  .ts-number,
  .ts-string,
  .ts-string-escape,
  .ts-string-special-symbol
  {
    color: map-get($colors, "value");
    font-style: normal;
  }

  // Comment tokens
  .ts-comment
  {
    color: map-get($colors, "comment");
    font-style: italic;
  }

  // Attribute tokens
  .ts-attribute,
  .ts-property
  {
    color: map-get($colors, "attribute");
    font-style: italic;
  }

  // Currently unused tokens
  .ts-_bool,
  .ts-_boolean,
  .ts-character,
  .ts-constant-macro
  .ts-float,
  .ts-function-special,
  .ts-injection-content,
  .ts-injection-language,
  .ts-label,
  .ts-local-definition,
  .ts-local-reference,
  .ts-local-scope,
  .ts-repeat,
  .ts-string-special,
  .ts-string-special-regex,
  .ts-symbol,
  .ts-tag-error
  {
    // Background color is set to bright red to draw the developer's attention
    // If a once unused token is now being used, it needs to be handled accordingly
    background-color: red;
  }
}
