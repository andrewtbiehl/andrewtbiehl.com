# The following workflow runs upon pushing new commits to the trunk branch
# It builds the site source and then deploys it to GitHub Pages
name: Site Deployment
permissions: {}
"on":
  push:
    branches:
      - main
concurrency: site_deployment
jobs:
  # The following job builds, archives, and uploads the source for the site
  build:
    name: Build
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout project
        uses: actions/checkout@v3.1.0
        with:
          submodules: recursive
      - name: Resolve submodule dependencies
        working-directory: _tree_sitter_ruby_adapter/parsers
        run: |
          ln -s .. tree-sitter-cpp/node_modules
          ln -s .. tree-sitter-typescript/node_modules
      - name: Determine project Ruby version
        run: |
          RUBY_VERSION=$(
            sed --silent --regexp-extended "s/^   ruby ([0-9\.]+).*$/\1/p" Gemfile.lock
          )
          echo "RUBY_VERSION=${RUBY_VERSION}" >> ${GITHUB_ENV}
      - name: Install project Ruby
        uses: ruby/setup-ruby@v1.125.0
        with:
          ruby-version: ${{env.RUBY_VERSION}}
          bundler: Gemfile.lock
          bundler-cache: true
          cache-version: ${{hashFiles('Gemfile.lock')}}
      - name: Restore project Rust cache
        id: restore-project-rust-cache
        uses: actions/cache@v3.0.11
        with:
          key: rust-packages-${{hashFiles('**/Cargo.toml', '**/Cargo.lock')}}
          path: ~/.cargo
      - name: Install project Rust
        if: ${{!steps.restore-project-rust-cache.outputs.cache-hit}}
        working-directory: _tree_sitter_ruby_adapter
        run: |
          RUST_VERSION=$(
            sed --silent --regexp-extended "s/^rust-version = '(.*)'$/\1/p" Cargo.toml
          )
          rustup install $RUST_VERSION
          rustup default $RUST_VERSION
      - name: Build Tree-sitter Ruby binding library
        working-directory: _tree_sitter_ruby_adapter
        run: cargo build --release
      - name: Build site
        run: bundle exec jekyll build
        env:
          JEKYLL_ENV: production
      - name: Archive and upload build
        uses: actions/upload-pages-artifact@v1.0.5
  # The following job deploys the previously built site source to GitHub Pages
  deploy:
    name: Deploy
    runs-on: ubuntu-20.04
    timeout-minutes: 20
    needs: build
    permissions:
      pages: write
      id-token: write
    environment:
      name: github-pages
      url: ${{steps.deploy-site.outputs.page_url}}
    steps:
      - name: Deploy site
        id: deploy-site
        uses: actions/deploy-pages@v1.2.3
